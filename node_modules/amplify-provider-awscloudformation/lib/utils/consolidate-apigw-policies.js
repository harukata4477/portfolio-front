"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadApiWithPrivacyParams = exports.consolidateApiGatewayPolicies = exports.APIGW_AUTH_STACK_LOGICAL_ID = void 0;
const path = __importStar(require("path"));
const amplify_cli_core_1 = require("amplify-cli-core");
const iam = __importStar(require("@aws-cdk/aws-iam"));
const cdk = __importStar(require("@aws-cdk/core"));
const prepare_app_1 = require("@aws-cdk/core/lib/private/prepare-app");
const constants_1 = require("../constants");
const resourceParams_1 = require("../resourceParams");
exports.APIGW_AUTH_STACK_LOGICAL_ID = 'APIGatewayAuthStack';
const API_PARAMS_FILE = 'api-params.json';
const CFN_TEMPLATE_FORMAT_VERSION = '2010-09-09';
const MAX_MANAGED_POLICY_SIZE = 6144;
const S3_UPLOAD_PATH = `api/${exports.APIGW_AUTH_STACK_LOGICAL_ID}.json`;
const AUTH_ROLE_NAME = 'authRoleName';
const UNAUTH_ROLE_NAME = 'unauthRoleName';
class ApiGatewayAuthStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.templateOptions.templateFormatVersion = CFN_TEMPLATE_FORMAT_VERSION;
        const authRoleName = new cdk.CfnParameter(this, AUTH_ROLE_NAME, {
            type: 'String',
        });
        const unauthRoleName = new cdk.CfnParameter(this, UNAUTH_ROLE_NAME, {
            type: 'String',
        });
        const env = new cdk.CfnParameter(this, 'env', {
            type: 'String',
        });
        new cdk.CfnCondition(this, 'ShouldNotCreateEnvResources', {
            expression: cdk.Fn.conditionEquals(env, 'NONE'),
        });
        let authRoleCount = 0;
        let unauthRoleCount = 0;
        let authPolicyDocSize = 0;
        let unauthPolicyDocSize = 0;
        let authManagedPolicy;
        let unauthManagedPolicy;
        props.apiGateways.forEach(apiGateway => {
            if (!Array.isArray(apiGateway.params.paths)) {
                return;
            }
            const apiRef = new cdk.CfnParameter(this, apiGateway.resourceName, {
                type: 'String',
            });
            const state = {
                apiGateway,
                apiRef,
                env,
                path: null,
                methods: null,
                roleCount: 0,
                roleName: null,
                policyDocSize: 0,
                managedPolicy: null,
                namePrefix: '',
            };
            apiGateway.params.paths.forEach(path => {
                var _a, _b, _c, _d;
                state.path = path;
                if (apiGateway.params.privacy.auth) {
                    state.methods = (_b = (_a = path === null || path === void 0 ? void 0 : path.privacy) === null || _a === void 0 ? void 0 : _a.auth) !== null && _b !== void 0 ? _b : [];
                    state.roleCount = authRoleCount;
                    state.roleName = authRoleName;
                    state.policyDocSize = authPolicyDocSize;
                    state.managedPolicy = authManagedPolicy;
                    state.namePrefix = 'PolicyAPIGWAuth';
                    this.createPoliciesFromResources(state);
                    ({ roleCount: authRoleCount, policyDocSize: authPolicyDocSize, managedPolicy: authManagedPolicy } = state);
                }
                if (apiGateway.params.privacy.unauth) {
                    state.methods = (_d = (_c = path === null || path === void 0 ? void 0 : path.privacy) === null || _c === void 0 ? void 0 : _c.unauth) !== null && _d !== void 0 ? _d : [];
                    state.roleCount = unauthRoleCount;
                    state.roleName = unauthRoleName;
                    state.policyDocSize = unauthPolicyDocSize;
                    state.managedPolicy = unauthManagedPolicy;
                    state.namePrefix = 'PolicyAPIGWUnauth';
                    this.createPoliciesFromResources(state);
                    ({ roleCount: unauthRoleCount, policyDocSize: unauthPolicyDocSize, managedPolicy: unauthManagedPolicy } = state);
                }
            });
        });
    }
    toCloudFormation() {
        prepare_app_1.prepareApp(this);
        return this._toCloudFormation();
    }
    createPoliciesFromResources(options) {
        const { apiGateway, apiRef, env, roleName, path, methods, namePrefix } = options;
        methods.forEach(method => {
            const policySizeIncrease = computePolicySizeIncrease(method.length, path.policyResourceName.length, apiGateway.resourceName.length);
            options.policyDocSize += policySizeIncrease;
            if (options.roleCount === 0 || options.policyDocSize > MAX_MANAGED_POLICY_SIZE) {
                options.policyDocSize = 100 + policySizeIncrease;
                options.roleCount++;
                options.managedPolicy = createManagedPolicy(this, `${namePrefix}${options.roleCount}`, roleName);
            }
            options.managedPolicy.policyDocument.Statement[0].Resource.push(createApiResource(this.region, this.account, apiRef, env, method, `${path.policyResourceName}/*`), createApiResource(this.region, this.account, apiRef, env, method, path.policyResourceName));
        });
    }
}
function createManagedPolicy(stack, policyName, roleName) {
    return new iam.CfnManagedPolicy(stack, policyName, {
        roles: [roleName],
        policyDocument: {
            Version: '2012-10-17',
            Statement: [{ Effect: 'Allow', Action: ['execute-api:Invoke'], Resource: [] }],
        },
    });
}
function createApiResource(region, account, api, env, method, resourceName) {
    return cdk.Fn.join('', [
        'arn:aws:execute-api:',
        region,
        ':',
        account,
        ':',
        api,
        '/',
        cdk.Fn.conditionIf('ShouldNotCreateEnvResources', 'Prod', env),
        method,
        resourceName,
    ]);
}
function computePolicySizeIncrease(methodLength, pathLength, nameLength) {
    return 380 + 2 * (methodLength + pathLength + nameLength);
}
function consolidateApiGatewayPolicies(context, stackName) {
    var _a;
    const apiGateways = [];
    const { amplifyMeta } = context.amplify.getProjectDetails();
    const apis = (_a = amplifyMeta === null || amplifyMeta === void 0 ? void 0 : amplifyMeta.api) !== null && _a !== void 0 ? _a : {};
    Object.keys(apis).forEach(resourceName => {
        const resource = apis[resourceName];
        const apiParams = loadApiWithPrivacyParams(context, resourceName, resource);
        if (!apiParams) {
            return;
        }
        const api = { ...resource, resourceName, params: apiParams };
        updateExistingApiCfn(context, api);
        apiGateways.push(api);
    });
    if (apiGateways.length === 0) {
        return {};
    }
    return createApiGatewayAuthResources(context, stackName, apiGateways);
}
exports.consolidateApiGatewayPolicies = consolidateApiGatewayPolicies;
function createApiGatewayAuthResources(context, stackName, apiGateways) {
    var _a, _b, _c;
    const stack = new ApiGatewayAuthStack(undefined, 'Amplify', {
        description: 'API Gateway policy stack created using Amplify CLI',
        stackName,
        apiGateways,
    });
    const cfn = stack.toCloudFormation();
    const { amplify } = context;
    const { DeploymentBucketName } = (_c = (_b = (_a = amplify.getProjectMeta()) === null || _a === void 0 ? void 0 : _a.providers) === null || _b === void 0 ? void 0 : _b[constants_1.ProviderName]) !== null && _c !== void 0 ? _c : {};
    const cfnPath = path.join(amplify.pathManager.getBackendDirPath(), 'api', `${exports.APIGW_AUTH_STACK_LOGICAL_ID}.json`);
    amplify_cli_core_1.JSONUtilities.writeJson(cfnPath, cfn);
    return {
        APIGatewayAuthURL: `https://s3.amazonaws.com/${DeploymentBucketName}/amplify-cfn-templates/${S3_UPLOAD_PATH}`,
    };
}
function loadApiWithPrivacyParams(context, name, resource) {
    var _a, _b, _c;
    if (resource.providerPlugin !== constants_1.ProviderName || resource.service !== 'API Gateway' || name === 'AdminQueries') {
        return;
    }
    const apiParamsPath = path.join(resourceParams_1.getResourceDirPath(context, 'api', name), API_PARAMS_FILE);
    const apiParams = (_a = amplify_cli_core_1.JSONUtilities.readJson(apiParamsPath, { throwIfNotExist: false })) !== null && _a !== void 0 ? _a : {};
    if (((_b = apiParams === null || apiParams === void 0 ? void 0 : apiParams.privacy) === null || _b === void 0 ? void 0 : _b.auth) === 0 && ((_c = apiParams === null || apiParams === void 0 ? void 0 : apiParams.privacy) === null || _c === void 0 ? void 0 : _c.unauth) === 0) {
        return;
    }
    return apiParams;
}
exports.loadApiWithPrivacyParams = loadApiWithPrivacyParams;
function updateExistingApiCfn(context, api) {
    var _a, _b, _c, _d, _e;
    const resourceName = api.resourceName || api.params.resourceName;
    const resourceDir = resourceParams_1.getResourceDirPath(context, 'api', resourceName);
    const cfnTemplate = path.join(resourceDir, `${resourceName}-cloudformation-template.json`);
    const paramsFile = path.join(resourceDir, 'parameters.json');
    const apiParamsFile = path.join(resourceDir, API_PARAMS_FILE);
    const cfn = (_a = amplify_cli_core_1.JSONUtilities.readJson(cfnTemplate, { throwIfNotExist: false })) !== null && _a !== void 0 ? _a : {};
    const parameterJson = (_b = amplify_cli_core_1.JSONUtilities.readJson(paramsFile, { throwIfNotExist: false })) !== null && _b !== void 0 ? _b : {};
    const parameters = (_c = cfn === null || cfn === void 0 ? void 0 : cfn.Parameters) !== null && _c !== void 0 ? _c : {};
    const resources = (_d = cfn === null || cfn === void 0 ? void 0 : cfn.Resources) !== null && _d !== void 0 ? _d : {};
    let modified = false;
    for (const parameterName in parameters) {
        if (parameterName === AUTH_ROLE_NAME || parameterName === UNAUTH_ROLE_NAME) {
            delete parameters[parameterName];
            modified = true;
        }
    }
    for (const parameterName in parameterJson) {
        if (parameterName === AUTH_ROLE_NAME || parameterName === UNAUTH_ROLE_NAME) {
            delete parameterJson[parameterName];
            modified = true;
        }
    }
    for (const resourceName in resources) {
        const resource = resources[resourceName];
        if (resource.Type === 'AWS::IAM::Policy') {
            const roles = (_e = resource === null || resource === void 0 ? void 0 : resource.Properties) === null || _e === void 0 ? void 0 : _e.Roles;
            if (Array.isArray(roles) && roles.length === 1) {
                const roleName = roles[0].Ref;
                if (roleName === AUTH_ROLE_NAME || roleName === UNAUTH_ROLE_NAME) {
                    delete resources[resourceName];
                    modified = true;
                }
            }
        }
    }
    if (Array.isArray(api.params.paths)) {
        api.params.paths.forEach(path => {
            if (!path.policyResourceName) {
                path.policyResourceName = String(path.name).replace(/{[a-zA-Z0-9\-]+}/g, '*');
                modified = true;
            }
        });
    }
    if (modified) {
        amplify_cli_core_1.JSONUtilities.writeJson(cfnTemplate, cfn);
        amplify_cli_core_1.JSONUtilities.writeJson(paramsFile, parameterJson);
        amplify_cli_core_1.JSONUtilities.writeJson(apiParamsFile, api.params);
    }
}
//# sourceMappingURL=consolidate-apigw-policies.js.map