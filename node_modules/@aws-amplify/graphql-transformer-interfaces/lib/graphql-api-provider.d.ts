import { NoneDataSource, HttpDataSource, DynamoDbDataSource, LambdaDataSource, BaseDataSource, CfnResolver } from '@aws-cdk/aws-appsync';
import { IFunction } from '@aws-cdk/aws-lambda';
import { ITable } from '@aws-cdk/aws-dynamodb';
import { CfnResource, Construct, IConstruct, Stack } from '@aws-cdk/core';
import { Grant, IGrantable } from '@aws-cdk/aws-iam';
export interface AppSyncFunctionConfigurationProvider extends IConstruct {
    readonly arn: string;
    readonly functionId: string;
}
export interface DataSourceOptions {
    readonly name?: string;
    readonly description?: string;
}
export declare enum TemplateType {
    INLINE = "INLINE",
    S3_LOCATION = "S3_LOCATION"
}
export interface InlineMappingTemplateProvider {
    type: TemplateType.INLINE;
    bind(scope: Construct): string;
}
export interface S3MappingTemplateProvider {
    type: TemplateType.S3_LOCATION;
    bind(scope: Construct): string;
}
export declare type MappingTemplateProvider = InlineMappingTemplateProvider | S3MappingTemplateProvider;
export interface GraphQLAPIProvider {
    readonly apiId: string;
    addHttpDataSource(name: string, endpoint: string, options?: DataSourceOptions, stack?: Stack): HttpDataSource;
    addDynamoDbDataSource(name: string, table: ITable, options?: DataSourceOptions, stack?: Stack): DynamoDbDataSource;
    addNoneDataSource(name: string, options?: DataSourceOptions, stack?: Stack): NoneDataSource;
    addLambdaDataSource(name: string, lambdaFunction: IFunction, options?: DataSourceOptions, stack?: Stack): LambdaDataSource;
    addAppSyncFunction: (name: string, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider, dataSourceName: string, stack?: Stack) => AppSyncFunctionConfigurationProvider;
    addResolver: (typeName: string, fieldName: string, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider, dataSourceName?: string, pipelineConfig?: string[], stack?: Stack) => CfnResolver;
    getDataSource: (name: string) => BaseDataSource | void;
    hasDataSource: (name: string) => boolean;
    addToSchema(addition: string): void;
    addSchemaDependency(construct: CfnResource): boolean;
    grant(grantee: IGrantable, resources: APIIAMResourceProvider, ...actions: string[]): Grant;
    grantMutation(grantee: IGrantable, ...fields: string[]): Grant;
    grantQuery(grantee: IGrantable, ...fields: string[]): Grant;
    grantSubscription(grantee: IGrantable, ...fields: string[]): Grant;
}
export interface APIIAMResourceProvider {
    resourceArns(api: GraphQLAPIProvider): string[];
}
//# sourceMappingURL=graphql-api-provider.d.ts.map